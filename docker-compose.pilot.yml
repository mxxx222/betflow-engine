version: '3.8'

services:
  # API Service with Canary Configuration
  api:
    build: ./api
    ports:
      - "8000:8000"
    environment:
      - USE_MOJO=1
      - SLO_P95_MS=1
      - SLO_P99_MS=5
      - MAX_FALLBACK_RATIO=0.05
      - PILOT_TRAFFIC=${PILOT_TRAFFIC:-10}
      - DATABASE_URL=postgresql://betflow_user:betflow_pass@postgres:5432/betflow
      - REDIS_URL=redis://redis:6379
      - API_RATE_LIMIT=1000
      - JWT_SECRET=pilot_jwt_secret_2024
      - ADMIN_EMAIL=admin@betflow-engine.com
      - PROVIDERS_ODDS_API_KEY=${PROVIDERS_ODDS_API_KEY:-demo_key}
      - PROVIDERS_SPORTS_MONKS_KEY=${PROVIDERS_SPORTS_MONKS_KEY:-demo_key}
      - N8N_WEBHOOK_URL=http://worker:5678/webhook
      - ENVIRONMENT=pilot
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECKS=true
    depends_on:
      - postgres
      - redis
      - engine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.betflow.local`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # Mojo Engine Service
  engine:
    build: ./engine
    environment:
      - USE_MOJO=1
      - MOJO_OPTIMIZATION_LEVEL=3
      - MOJO_CACHE_SIZE=1000
      - ENABLE_BENCHMARKS=true
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "python", "-c", "import engine; print('Mojo engine ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Worker Service (n8n)
  worker:
    build: ./worker
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-pilot_password}
      - N8N_WEBHOOK_URL=http://worker:5678/webhook
      - DATABASE_URL=postgresql://betflow_user:betflow_pass@postgres:5432/betflow
      - REDIS_URL=redis://redis:6379
      - PROVIDERS_ODDS_API_KEY=${PROVIDERS_ODDS_API_KEY:-demo_key}
      - PROVIDERS_SPORTS_MONKS_KEY=${PROVIDERS_SPORTS_MONKS_KEY:-demo_key}
      - ENVIRONMENT=pilot
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Web Dashboard
  web:
    build: ./web
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
      - PILOT_MODE=true
    depends_on:
      - api
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=betflow
      - POSTGRES_USER=betflow_user
      - POSTGRES_PASSWORD=betflow_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U betflow_user -d betflow"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-pilot_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # SLO Monitor
  slo-monitor:
    build: ./monitoring
    environment:
      - API_URL=http://api:8000
      - MONITORING_INTERVAL=30
      - P95_MAX_MS=1.0
      - P99_MAX_MS=5.0
      - ERROR_MAX=0.001
      - FALLBACK_MAX=0.05
    depends_on:
      - api
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
