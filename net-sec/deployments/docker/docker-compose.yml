version: '3.8'

services:
  # Privacy Gateway (Nginx with rate limiting)
  privacy-gateway:
    image: nginx:1.25-alpine
    container_name: gdpr-privacy-gateway
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - compliance-api
    networks:
      - gdpr-public
      - gdpr-private
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Compliance API
  compliance-api:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.compliance-api
    container_name: gdpr-compliance-api
    environment:
      - DATABASE_URL=postgresql://gdpr_user:${POSTGRES_PASSWORD}@postgres:5432/gdpr_compliance?sslmode=require
      - REDIS_URL=redis://redis:6379/0
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - ENCRYPTION_KEY_ID=primary-2024
      - AUDIT_ALL_ACCESS=true
      - DATA_MINIMIZATION_ENABLED=true
      - PSEUDONYMIZATION_ENABLED=true
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
    volumes:
      - ./config:/app/config:ro
      - audit-logs:/var/log/audit
    networks:
      - gdpr-private
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Encrypted)
  postgres:
    image: postgres:15-alpine
    container_name: gdpr-postgres
    environment:
      - POSTGRES_DB=gdpr_compliance
      - POSTGRES_USER=gdpr_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - gdpr-private
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gdpr_user -d gdpr_compliance"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/server.crt
      -c ssl_key_file=/etc/ssl/private/server.key
      -c log_statement=all
      -c log_min_duration_statement=1000

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    container_name: gdpr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - gdpr-private
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  # HashiCorp Vault for Key Management
  vault:
    image: hashicorp/vault:1.15
    container_name: gdpr-vault
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault-data:/vault/data
      - ./vault/config:/vault/config:ro
    networks:
      - gdpr-private
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Audit Service (Immutable Logs)
  audit-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.audit-service
    container_name: gdpr-audit-service
    environment:
      - POSTGRES_URL=postgresql://audit_user:${AUDIT_POSTGRES_PASSWORD}@postgres:5432/audit_logs
      - IMMUTABLE_STORAGE=true
      - ENCRYPTION_ENABLED=true
      - LOG_LEVEL=debug
    volumes:
      - audit-logs:/var/log/audit
      - immutable-storage:/var/lib/immutable
    networks:
      - gdpr-private
    depends_on:
      - postgres
    restart: unless-stopped

  # Retention Jobs Service
  retention-jobs:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.retention-jobs
    container_name: gdpr-retention-jobs
    environment:
      - DATABASE_URL=postgresql://gdpr_user:${POSTGRES_PASSWORD}@postgres:5432/gdpr_compliance
      - SCHEDULE_INTERVAL=1h
      - DRY_RUN=false
      - LEGAL_HOLD_CHECK=true
    depends_on:
      - postgres
    volumes:
      - retention-logs:/var/log/retention
    networks:
      - gdpr-private
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:v2.45
    container_name: gdpr-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - gdpr-private
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:10.1
    container_name: gdpr-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SERVER_ROOT_URL=https://grafana.gdpr.local
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - gdpr-private
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: gdpr-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    networks:
      - gdpr-private
    restart: unless-stopped

  # Elasticsearch for Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: gdpr-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/elasticsearch.key
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca.crt
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro
    networks:
      - gdpr-private
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Kibana for Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: gdpr-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_KEY=/usr/share/kibana/config/certs/kibana.key
      - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/certs/kibana.crt
    volumes:
      - ./kibana/config:/usr/share/kibana/config:ro
    networks:
      - gdpr-private
    depends_on:
      - elasticsearch
    restart: unless-stopped

# Networks
networks:
  gdpr-public:
    driver: bridge
    name: gdpr-public
  gdpr-private:
    driver: bridge
    name: gdpr-private
    internal: true

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  vault-data:
    driver: local
  audit-logs:
    driver: local
  immutable-storage:
    driver: local
  retention-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local