version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    build: ./db
    container_name: betflow-postgres
    environment:
      POSTGRES_DB: betflow
      POSTGRES_USER: betflow
      POSTGRES_PASSWORD: betflow123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/migrations
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U betflow -d betflow"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - betflow-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: betflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - betflow-network

  # FastAPI Backend
  api:
    build: ./api
    container_name: betflow-api
    environment:
      - POSTGRES_URL=postgresql://betflow:betflow123@postgres:5432/betflow
      - REDIS_URL=redis://redis:6379
      - API_RATE_LIMIT=100
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - DEBUG=true
      - LOG_LEVEL=INFO
    volumes:
      - ./api:/app
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - betflow-network

  # Next.js Frontend
  web:
    build: ./web
    container_name: betflow-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - betflow-network

  # Mojo Engine
  engine:
    build: ./engine
    container_name: betflow-engine
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./engine:/app
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - betflow-network

  # n8n Workflows
  n8n:
    build: ./worker
    container_name: betflow-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_WEBHOOK_URL=http://n8n:5678
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://n8n:5678
      - GENERIC_TIMEZONE=UTC
    volumes:
      - n8n_data:/home/node/.n8n
      - ./worker:/home/node/.n8n/workflows
    ports:
      - "5678:5678"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - betflow-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: betflow-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - betflow-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: betflow-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - betflow-network

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  prometheus_data:
  grafana_data:

networks:
  betflow-network:
    driver: bridge
